version: "3.8"

services:
  postgres:
    image: postgres:15
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      POSTGRES_DB: procurement
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d procurement"]
      interval: 10s
      retries: 5
      start_period: 10s

  redis:
    image: redis:latest
    container_name: redis_cache
    restart: always
    ports:
      - "6379:6379"
    networks:
      - backend

  redis-ui:
    image: redislabs/redisinsight:latest 
    container_name: redis_ui
    restart: always
    ports:
      - "8001:8001"
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - backend

  kafka-ui:
    image: obsidiandynamics/kafdrop
    container_name: kafka_ui
    restart: always
    depends_on:
      - kafka
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
    ports:
      - "9000:9000"
    networks:
      - backend

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "5050:80"
    networks:
      - backend

  auth-service:
    build: ./services/auth-service
    container_name: auth-service
    restart: always
    environment:
      DB_HOST: postgres_db
      DB_PORT: 5432
      DB_USER: admin
      DB_PASSWORD: admin123
      DB_NAME: procurement
      JWT_SECRET: mysupersecretkey
    ports:
      - "5009:5009"
    depends_on:
      postgres:
       condition: service_healthy
    networks:
      - backend
    volumes:
      - ./services/auth-service:/app
    command: npm run dev 

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    restart: always
    ports:
      - "5000:5000"
    depends_on:
      - auth-service
    environment:
      PORT: 5000
      AUTH_SERVICE_URL: http://auth-service:5009
    networks:
      - backend
    volumes:
      - ./api-gateway:/app
    command: npm run dev  # Run in development mode

volumes:
  postgres_data:

networks:
  backend:
    driver: bridge


